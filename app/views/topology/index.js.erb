
//$("#result").append("<%#= j render 'gg'%>");
$("#map2").empty();
var modal = document.getElementById('myModal');





Raphael.fn.connection = function (obj1, obj2, line, bg) {
  if (obj1.line && obj1.from && obj1.to) {
    line = obj1;
    obj1 = line.from;
    obj2 = line.to;
  }
  var bb1 = obj1.getBBox(),
      bb2 = obj2.getBBox(),
      p = [{x: bb1.x + bb1.width / 2, y: bb1.y - 1},
        {x: bb1.x + bb1.width / 2, y: bb1.y + bb1.height + 1},
        {x: bb1.x - 1, y: bb1.y + bb1.height / 2},
        {x: bb1.x + bb1.width + 1, y: bb1.y + bb1.height / 2},
        {x: bb2.x + bb2.width / 2, y: bb2.y - 1},
        {x: bb2.x + bb2.width / 2, y: bb2.y + bb2.height + 1},
        {x: bb2.x - 1, y: bb2.y + bb2.height / 2},
        {x: bb2.x + bb2.width + 1, y: bb2.y + bb2.height / 2}],
      d = {}, dis = [];
  for (var i = 0; i < 4; i++) {
    for (var j = 4; j < 8; j++) {
      var dx = Math.abs(p[i].x - p[j].x),
          dy = Math.abs(p[i].y - p[j].y);
      if ((i == j - 4) || (((i != 3 && j != 6) || p[i].x < p[j].x) && ((i != 2 && j != 7) || p[i].x > p[j].x) && ((i != 0 && j != 5) || p[i].y > p[j].y)
          && ((i != 1 && j != 4) || p[i].y < p[j].y))) {
        dis.push(dx + dy);
        d[dis[dis.length - 1]] = [i, j];
      }
    }
  }
  if (dis.length == 0) {
    var res = [0, 4];
  } else {
    res = d[Math.min.apply(Math, dis)];
  }
  var x1 = p[res[0]].x,
      y1 = p[res[0]].y,
      x4 = p[res[1]].x,
      y4 = p[res[1]].y;
  dx = Math.max(Math.abs(x1 - x4) / 2, 10);
  dy = Math.max(Math.abs(y1 - y4) / 2, 10);
  var x2 = [x1, x1, x1 - dx, x1 + dx][res[0]].toFixed(3),
      y2 = [y1 - dy, y1 + dy, y1, y1][res[0]].toFixed(3),
      x3 = [0, 0, 0, 0, x4, x4, x4 - dx, x4 + dx][res[1]].toFixed(3),
      y3 = [0, 0, 0, 0, y1 + dy, y1 - dy, y4, y4][res[1]].toFixed(3);
  var path = ["M", x1.toFixed(3), y1.toFixed(3), "C", x2, y2, x3, y3, x4.toFixed(3), y4.toFixed(3)].join(",");
  if (line && line.line) {
    line.bg && line.bg.attr({path: path});
    line.line.attr({path: path});
  } else {
    var color = typeof line == "string" ? line : "#000";
    return {
      bg: bg && bg.split && this.path(path).attr({stroke: bg.split("|")[0], fill: "none", "stroke-width": bg.split("|")[1] || 3}),
      line: this.path(path).attr({stroke: color, fill: "none"}),
      from: obj1,
      to: obj2
    };
  }
};




// start build ring on yandex map
ymaps.ready(function () {
  var myMap = new ymaps.Map('map2', {
        //center: [55.751574, 37.573856],
        center: ["<%= @gontop[:tp][0]['lat']%>", "<%= @gontop[:tp][0]['lng']%>"],
        zoom: 17
      }),



      myTP = new ymaps.Placemark(myMap.getCenter(), {
        hintContent: 'тпшка',
        //balloonContent: '<%= @gontop[:tp][0]['ip']%>'
        balloonContent: "<%= @gontop[:tp][0]['ip'] %>"
      }, {
        // Опции.
        // Необходимо указать данный тип макета.
        iconLayout: 'default#image',
        // Своё изображение иконки метки.
        iconImageHref: 'https://upload.wikimedia.org/wikipedia/commons/thumb/5/5c/Router.svg/2000px-Router.svg.png',
        // Размеры метки.
        iconImageSize: [30, 20],
        // Смещение левого верхнего угла иконки относительно
        // её "ножки" (точки привязки).
        iconImageOffset: [-4, 3]
      });


  '<% @gontop[:tp_link].each do |tplink|%>'
  var myTPlink = new ymaps.GeoObject({
    // Описываем геометрию геообъекта.
    geometry: {
      // Тип геометрии - "Ломаная линия".
      type: "LineString",
      // Указываем координаты вершин ломаной.
      coordinates: [
        ["<%= @gontop[:tp][0]['lat']%>", "<%= @gontop[:tp][0]['lng']%>"],
        ['<%= tplink[:lat] %>', '<%= tplink[:lng] %>']
      ]
    },
    // Описываем свойства геообъекта.
    properties:{
      // Содержимое хинта.
      hintContent: "Я геообъект",
      // Содержимое балуна.
      balloonContent: "Меня можно перетащить"
    }
  }, {
    // Задаем опции геообъекта.
    // Включаем возможность перетаскивания ломаной.
    raggable: false,
    // Цвет линии.
    strokeColor: "#0000FF",
    // Ширина линии.
    strokeWidth: 1
  });



  myMap.geoObjects.add(myTPlink);
  '<% end %>'
  myMap.geoObjects.add(myTP);


  '<% @gontop[:ring].each do |hash|%>'
  '<% status = hash[:all_status].find {|ip| ip[:ip] == hash[:ips][0] }%>'
//alert('<%= hash %>');
//alert('<%= hash["lat"] %>');


  var swstatus = []


  '<% if status[:status] == '0' %>'

  var myPlacemark = new ymaps.GeoObject({
        // Описание геометрии.
        geometry: {
          type: "Point",
          coordinates: ['<%= hash[:lat] %>', '<%= hash[:lng] %>']
        },
        // Свойства.
        properties: {
          // Контент метки.
          iconContent: '<%= hash[:ip] %>',
          //iconContent: "<%= @hostname %>",

        }
      }, {
        // Опции.
        // Иконка метки будет растягиваться под размер ее содержимого.
        preset: 'islands#redStretchyIcon'} )

      ;
  '<% elsif status[:status] == '1' %>'
  var myPlacemark = new ymaps.GeoObject({
        // Описание геометрии.
        geometry: {
          type: "Point",
          coordinates: ['<%= hash[:lat] %>', '<%= hash[:lng] %>']
        },
        // Свойства.
        properties: {
          // Контент метки.
          iconContent: '<%= hash[:ip] %>',
          //iconContent: "<%= @hostname %>",

        }
      }, {
        // Опции.
        // Иконка метки будет растягиваться под размер ее содержимого.
        preset: 'islands#greenStretchyIcon'} )

      ;

  '<% end %>'


  myPlacemark.events.add('click', function () {

//начало raphael object




    var span = document.getElementsByClassName("close")[0];
    modal.style.display = "block";


////raphael




    var color, i, ii, tempS, tempT,
        dragger = function () {
          // Original coords for main element
          this.ox = this.type == "circle" ? this.attr("cx") : this.attr("x");
          this.oy = this.type == "circle" ? this.attr("cy") : this.attr("y");
          if (this.type != "text") this.animate({"fill-opacity": .2}, 500);

          // Original coords for pair element
          this.pair.ox = this.pair.type == "circle" ? this.pair.attr("cx") : this.pair.attr("x");
          this.pair.oy = this.pair.type == "circle" ? this.pair.attr("cy") : this.pair.attr("y");
          if (this.pair.type != "text") this.pair.animate({"fill-opacity": .2}, 500);
        },
        move = function (dx, dy) {



          // Move main element


          var att = this.type == "circle" ? {cx: this.ox + dx, cy: this.oy + dy} :
          {x: this.ox + dx, y: this.oy + dy};
          this.attr(att);

          // Move paired element
          att = this.pair.type == "circle" ? {cx: this.pair.ox + dx, cy: this.pair.oy + dy} :
          {x: this.pair.ox + dx, y: this.pair.oy + dy};
          this.pair.attr(att);

          // Move connections
          for (i = connections.length; i--;) {
            r.connection(connections[i]);
          }
//            r.safari();
        },
        up = function () {
          // Fade original element on mouse up
          if (this.type != "text") this.animate({"fill-opacity": 0}, 500);

          // Fade paired element on mouse up
          if (this.pair.type != "text") this.pair.animate({"fill-opacity": 0}, 500);
        },

        r = Raphael('holder');
    connections = [];
    shapes = [];
    texts = [];
    var b = [];


////raphael

    function prevnext(val){
      //alert(val);
      if (val == undefined ){
        val = "TP";
        return val;
      } else {
        return val.substr(val.lastIndexOf(".") + 1);
      }
    }

    incom = r.rect(350  , 50, 60, 40);
    r.text(380  , 70  , prevnext('<%= hash[:main][:ip] %>'));

    '<% hash[:ips].each do |ip| %>'




//swstatus.push

    function rdm(from, to){
      return Math.floor(Math.random() * (to - from + 1) + from);
    }


    var cx = rdm(50, 400);
    var cy = rdm(50, 400);


    shapes.push(r.circle(cx , cy , 10, 20));
    texts.push(r.text(cx , cy , '<%= ip.split('.')[-1] %>'));
    b.push('<%= ip %>');
    '<% end %>'






    for (i = 0, ii = shapes.length; i < ii; i++) {
      //color = Raphael.getColor();
      color = "green";
      tempS = shapes[i].attr({fill: color, stroke: color, "fill-opacity": 0, "stroke-width": 2, cursor: "move"});
      tempT = texts[i].attr({stroke: "none", "font-size": 10, cursor: "move"});
      shapes[i].drag(move, dragger, up);
      texts[i].drag(move, dragger, up);

      // Associate the elements
      tempS.pair = tempT;
      tempT.pair = tempS;
    }

    connections.push(r.connection(incom, shapes[0], "#000"));



//'<% if hash[:next][0].nil?%>'

//'<% else %>'

    '<% hash[:next].count.times do |i| %>'
    '<%  port25 = @gonring.find {|sw| sw[:port25] == hash[:next][i]}%>'
    '<% port26 = @gonring.find {|sw| sw[:port26] == hash[:next][i]}%>'
    '<% port27 = @gonring.find {|sw| sw[:port27] == hash[:next][i]}%>'
    '<% port28 = @gonring.find {|sw| sw[:port28] == hash[:next][i]}%>'




    '<% portssw = [port25, port26, port27, port28].reject {|n| n.nil? }  %>'

    '<% portssw1 = portssw.reject {|n| n[:ip].nil?}.map{|ip| ip[:ip]} %>'
    '<% nexts = portssw1 & hash[:ips] %>'
//$("#test").append('<%= portssw1 & hash[:ips] %>');


//alert('<%= hash[:next][1] %>');

    out = r.rect(350 + (100 * '<%= i %>') , 450, 60, 40);
    r.text(380 + (100* '<%= i %>') , 470 , prevnext('<%= hash[:next][i] %>'));


    outind =  b.indexOf("<%= nexts[0]%>");
    connections.push(r.connection(out, shapes[outind], "#000"));

//'<% end %>'
    '<% end %>'
    io = 0;
    '<% hash[:hash].each do |nestofhash| %>'

    '<% for nest in nestofhash     %>'
    p25 = b.indexOf('<%= nest[:port25]%>');
    p26 =  b.indexOf('<%= nest[:port26]%>');
    p27 =  b.indexOf('<%= nest[:port27]%>');
    p28 =  b.indexOf('<%= nest[:port28]%>');
    main =  b.indexOf('<%= nest[:ip]%>');

    nest0 = shapes[main]
    nest1 = shapes[p25];
    nest2 = shapes[p26];
    nest3 = shapes[p27];
    nest4 = shapes[p28];


    if (nest1 != null) {
      connections.push(r.connection(nest0, nest1, "#000"));
    }else
    {
    }
    if (nest2 != null) {
      connections.push(r.connection(nest0, nest2, "#000"));
    } else {
    }
    if (nest3 != null) {
      connections.push(r.connection(nest0, nest3, "#000"));
    } else {
    }
    if (nest4 != null) {
      connections.push(r.connection(nest0, nest4, "#000"));
    } else {
    }
    io+=5

    '<% end%>'
    '<% end %>'

//конец raphael object

    span.onclick = function() {
      r.remove();

      modal.style.display = "none";
    }

  })



//alert('<%= hash[:status]%>');


  '<% hash[:nest].each do |nest| %>'
  '<% if hash[:status] == '1' %>'
  var mySWlink = new ymaps.GeoObject({
    // Описываем геометрию геообъекта.
    geometry: {
      // Тип геометрии - "Ломаная линия".
      type: "LineString",
      // Указываем координаты вершин ломаной.


      coordinates: [
        ["<%= hash[:lat]%>", "<%= hash[:lng]%>"],
        ["<%= nest[0] %>", "<%= nest[1] %>"]
      ]
    },
    // Описываем свойства геообъекта.
    properties:{
      // Содержимое хинта.
      //hintContent: "Я линк",
      // Содержимое балуна.
      //balloonContent: "Меня можно перетащить"
    }
  }, {
    // Задаем опции геообъекта.
    // Включаем возможность перетаскивания ломаной.
    raggable: false,
    // Цвет линии.



    strokeColor: "#00FF00",
    // Ширина линии.
    strokeWidth: 1
  });
//alert('<%= hash[:status]%>');
  '<% else %>'
  var mySWlink = new ymaps.GeoObject({
    // Описываем геометрию геообъекта.
    geometry: {
      // Тип геометрии - "Ломаная линия".
      type: "LineString",
      // Указываем координаты вершин ломаной.


      coordinates: [
        ["<%= hash[:lat]%>", "<%= hash[:lng]%>"],
        ["<%= nest[0] %>", "<%= nest[1] %>"]
      ]
    },
    // Описываем свойства геообъекта.
    properties:{
      // Содержимое хинта.
      //hintContent: "Я линк",
      // Содержимое балуна.
      //balloonContent: "Меня можно перетащить"
    }
  }, {
    // Задаем опции геообъекта.
    // Включаем возможность перетаскивания ломаной.
    raggable: false,
    // Цвет линии.



    strokeColor: "#FF0000",
    // Ширина линии.
    strokeWidth: 1
  });
//alert('<%= hash[:status]%>');

  '<% end %>'
  myMap.geoObjects.add(mySWlink);
  '<% end %>'
  myMap.geoObjects.add(myPlacemark);

  '<% end %>'





});

